آیا از Stack می‌شه به متغیرهای global یا heap دسترسی داشت؟ اگر بله یا خیر، چرا؟

دو بخش داره:

آیا از نظر دسترسی در C می‌شه این متغیرها رو از روی stack صدا زد؟

آیا از نظر BOF (بافر اورفلو) ممکنه memory اون‌ها رو rewrite کرد؟


High Memory
────────────
|   Stack   | ← متغیرهای محلی، return address، رشد از بالا به پایین
────────────
|   Heap    | ← حافظه‌ی داینامیک malloc()، رشد از پایین به بالا
────────────
|  BSS/Data | ← متغیرهای global/static
────────────
|   Code    | ← کد اجرایی برنامه
────────────
Low Memory


---

### ✅ بخش اول: آیا می‌شه از Stack به متغیرهای Heap و Global دسترسی داشت؟

بله ✅

در زبان C:

* متغیرهای **Global** در **Data Segment** ذخیره می‌شن و **در تمام توابع قابل‌دسترسی** هستن (با `extern` هم حتی از فایل‌های دیگه).
* متغیرهای **Heap** توسط `malloc()`، `calloc()` و ... ساخته می‌شن و با استفاده از **اشاره‌گرها (pointers)** می‌تونن در توابع مختلف (از جمله داخل stack) استفاده بشن.

📌 نکته:

> پس بله، از داخل Stack می‌تونیم به متغیرهای Heap و Global دسترسی داشته باشیم، **ولی نه به‌صورت مستقیم در حافظه، بلکه با اشاره‌گر.**

---

### ✅ بخش دوم: آیا Buffer Overflow می‌تونه memory اون‌ها رو rewrite کنه؟

✅ بله، اما با شرایط خاص:

* Buffer Overflow معمولاً اول به **متغیرهای مجاور در Stack** آسیب می‌زنه (چون همه‌چی نزدیک هم ذخیره شده).
* اما اگر برنامه **اشاره‌گر به Heap یا Global** داشته باشه و آدرس اون‌ها اشتباهی rewrite بشه (مثلاً `ptr = some_overflow_input`)، ممکنه محتویات Heap یا Global رو هم تغییر بده.

📌 مثال:

```c
char *ptr = malloc(16);
char buffer[8];
strcpy(buffer, user_input);  // overflow می‌تونه آدرس ptr رو تغییر بده!
```

---

### 🧠 جمع‌بندی:

| حافظه  | آیا در دسترس هست؟ | آیا توسط BOF آسیب‌پذیره؟         | توضیح                          |
| ------ | ----------------- | -------------------------------- | ------------------------------ |
| Stack  | ✅ بله             | ✅ بیشترین خطر                    | متغیرهای محلی و return address |
| Heap   | ✅ بله             | ✅ با اشاره‌گر و اشتباه در مدیریت |                                |
| Global | ✅ بله             | ✅ اگر اشاره‌گر بهشون rewrite بشه |                                |

---


