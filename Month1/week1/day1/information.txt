
---

## 🔍 تحلیل آدرس‌ها

```
Address of code   : 0x57bfe99e31a9
Address of global : 0x57bfe99e6010
Address of static : 0x57bfe99e6014
Address of local  : 0x7ffd9d3db23c
Address of heap   : 0x57c003f112a0
```

---

### ✅ آدرس‌های مهم:

| بخش              | آدرس                               | توضیح                                                |
| ---------------- | ---------------------------------- | ---------------------------------------------------- |
| **Code Segment** | `0x57bfe99e31a9`                   | محل قرارگیری کد برنامه (توابع مثل `main`)            |
| **Data Segment** | `0x57bfe99e6010`, `0x57bfe99e6014` | متغیرهای global و static که مقداردهی اولیه شده‌اند   |
| **Stack**        | `0x7ffd9d3db23c`                   | محل متغیرهای محلی (local) – رشد از بالا به پایین     |
| **Heap**         | `0x57c003f112a0`                   | حافظه داینامیکی با `malloc()` – رشد از پایین به بالا |

---

### 🧠 نکات مهمی که باید بگیری:

1. ✅ آدرس **Stack** معمولاً در محدوده **0x7fff...** است و از بالا به پایین رشد می‌کند.
2. ✅ آدرس **Heap** در ناحیه‌ای پایین‌تر از Stack قرار دارد و از پایین به بالا رشد می‌کند.
3. ✅ آدرس‌های **global** و **static** معمولاً نزدیک هم هستند و در Data Segment قرار دارند.
4. ✅ کد برنامه در **Code Segment** ذخیره می‌شود و معمولاً در ناحیه‌ای کاملاً جدا از داده‌هاست.

---

## ❗ چرا این مهمه برای Buffer Overflow؟

چون اگر بتونی از طریق stack به بخش‌های دیگر حافظه (مثل return address یا حتی shellcode در heap) دسترسی پیدا کنی، می‌تونی کنترل برنامه رو دست بگیری. این همون کاریه که توی Buffer Overflow انجام می‌شه.

---

