بخش اول: تحلیل info frame
gdb
Copy
Edit
Stack level 0, frame at 0x7fffffffdc90:
 rip = 0x555555555185 in main
 saved rip = 0x7ffff7c2a1ca
 Locals at 0x7fffffffdc80
 Previous frame's sp is 0x7fffffffdc90
 Saved registers:
  rbp at 0x7fffffffdc80
  rip at 0x7fffffffdc88
توضیح:
rip: آدرس دستور فعلی در تابع main هست (0x555555555185)

saved rip: آدرس بازگشت از main() به تابع والد، یعنی کجا باید بعد از اتمام main() ادامه بده.

Locals at 0x7fffffffdc80: یعنی متغیرهای محلی (local variables) از اینجا در stack ذخیره شدن.

rbp و rsp هر دو برابر 0x7fffffffdc80 هستن ⇒ یعنی ما ابتدای فریم stack هستیم.

🧠 بخش دوم: تحلیل info registers
gdb
Copy
Edit
rbp = 0x7fffffffdc80
rsp = 0x7fffffffdc80
rip = 0x555555555185  → در حال حاضر توی main هستیم
rbp (Base Pointer): آدرس پایه‌ی فریم stack فعلی

rsp (Stack Pointer): اشاره‌گر به آخرین فضای استفاده نشده در Stack
در این حالت چون تازه وارد main() شدیم، rsp و rbp یکسان هستن.

🧠 بخش سوم: تحلیل x/20x $rsp
gdb
Copy
Edit
0x7fffffffdc80:	0xffffdd20	0x00007fff	0xf7c2a1ca	0x00007fff
این مقادیر محتویات stack هستن از آدرس فعلی rsp به بعد (پایین‌تر در حافظه).

معمولاً جفت‌جفت معنی‌دار هستن (8 بایتی)، چون سیستم 64 بیتی هست.

بیایید بررسی کنیم:

🔍 مثال: خط اول
css
Copy
Edit
0x7fffffffdc80 → 0x00007fffffffdd20  ← احتمالاً آدرس argc یا argv
0x7fffffffdc88 → 0x00007ffff7c2a1ca ← saved RIP (برای برگشت از main)
یعنی:

0x7fffffffdc80 → مقدارهایی ذخیره شدن که بعضی‌ها ممکنه return address یا آرگومان‌های تابع باشن.

می‌تونیم این مقادیر رو بهتر درک کنیم اگر Stack Frame رو با مقادیر متغیرها بررسی کنیم (توی چالش بعد).

✅ نتیجه‌گیری:
در این مرحله فهمیدیم:

Stack چطوری حافظه‌ی توابع رو ذخیره می‌کنه

چه داده‌هایی روی Stack هستن (return address، rbp، پارامترها، و ...)

چطور با GDB این داده‌ها رو ببینیم
